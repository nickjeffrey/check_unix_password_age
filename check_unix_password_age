#!/usr/bin/perl -w

 
# CHANGE LOG
# ----------
#  2020/02/15	njeffrey	Script created
#  2020/03/05	njeffrey	Fix regex bug


# FUTURE ENHANCEMENTS
# -------------------
#  1) Allow @list_of_users to be specified as a parameter instead of hard-coded in script
#  2) Allow for all user accounts to be checked instead of just a specified list of users
#  3) Add support for other UNIX flavours (HP-UX, SunOS, *BSD, Darwin)



# NOTES
# -----
#  This script is intended to be the all-singing all-dancing nagios check for password age on UNIX-like systems.

#
#  Tested on AIX 6.1 and 7.1, IBM VIOS (based on AIX 6.1 but config file is at /home/padmin/config/ntp.conf)
#  Tested on CentOS 7, Ubuntu 16.04 / 17.10 / 18.04, Raspian
#  Not yet tested on FreeBSD, OpenBSD, NetBSD, MacOS, SunOS, HP-UX, MacOS/Darwin
#
#
#  This script is executed remotely on a monitored system by the NRPE or check_by_ssh
#  methods available in nagios.
#
#  If you are using the check_by_ssh method, you will need a section in the services.cfg
#  file on the nagios server that looks similar to the following.
#  This assumes that you already have ssh key pairs configured.
#   # Define service for checking time synchronization
#   define service{
#           use                             generic-24x7-service
#           host_name                       unix11
#           service_description             password age
#           check_command                   check_by_ssh!"/usr/local/nagios/libexec/check_unix_password_age"
#           }
#
#  If you are using the check_nrpe method, you will need a section in the services.cfg
#  file on the nagios server that looks similar to the following.
#  This assumes that you already have ssh key pairs configured.
#   # Define service for checking time synchronization
#   define service{
#           use                             generic-24x7-service
#           host_name                       unix11
#           service_description             password age
#           check_command                   check_nrpe!check_unix_password_age -t 30
#           }
#
#  If using NRPE, you will also need a section defining the NRPE command in the /usr/local/nagios/nrpe.cfg file that looks like this:
#   command[check_unix_password_age]=/usr/local/nagios/libexec/check_unix_password_age
#
#
# Schedule this script to run every 12 hours from the root crontab, then have nagios just read the output file from the cron job.
# Create cron entries in the root user crontab similar to the following:  (one for each vmware host)
#   1 1,13 * * * /usr/local/nagios/libexec/check_unix_password_age  1>/dev/null 2>/dev/null
#




# ASSUMPTIONS
# -----------
#  It is assumed that perl is installed on the machine running this script.
#     For RHEL / CentOS     yum install perl
#     For Debian / Ubuntu   apt install perl
#     For FreeBSD           pkg install perl5
#
#  It is assumed that passwords do have an expiry date (ie 60 days, 90 days, etc)
#     AIX          lsuser -a maxage 
#
#
#  It is assumed that this script is being run as a low-privileged user (typically nagios), and that 
#  typical user permissions are sufficient to run the time sync query commands in this script.
#
#





# TROUBLESHOOTING
# ---------------
#   The first line of this script is #!/usr/bin/perl, which is fine for most UNIX-like operating systems.
#   However, FreeBSD puts the perl binary at /usr/local/bin/perl, so please create a symlink on FreeBSD:
#      ln -s /usr/local/bin/perl /usr/bin/perl
#
#   This script requires root privileges to run the following commands:
#       lsuser           (AIX)
#       cat /etc/shadow  (Linux)
#
#   Rather than give the nagios user and additional privileges, this script will run from the root crontab every 12 hours,
#   generating a /tmp/nagios.check_unix_password.age.tmp file.  This file will be read by the low-privileged nagios user
#   when the check is run from nagios.
#   Ensure the root crontab has an entry similar to the following:
#   1 1,13 * * * /usr/local/nagios/libexec/check_unix_password_age >/dev/null 2>&1 #nagios helper script 




use strict;						#enforce good coding practices
use Getopt::Long;                       		#allow --long-switches to be used as parameters

#declare variables
my ($verbose,$os,$cmd,$key);
my ($uname,$shadow);
my ($password_maxage_days,$password_age_days,$password_lastupdate);
my ($seconds_since_epoch,$days_since_epoch);
my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,$blksize,$blocks);
my ($common_output_data,$perf_data,$output_filename,$output_file_age,$output_message);
my (@list_of_users,$current_user,%users);
my ($OK,$WARN,$CRITICAL,$UNKNOWN,$CHECK_NAME);
my ($opt_h,$opt_v);
$verbose            = "no";				#yes/no flag to increase verbosity during debugging
$common_output_data = "";                               #nagios output
$perf_data          = "";                               #nagios performance data included in output
$CHECK_NAME         = "password age";
@list_of_users = ("root","oracle","padmin","njeffrey","pelson","bkubas");		#all the usernames to check.  Should contain at least the root user.  

#
# Nagios return codes
#
$OK=		0;
$WARN=		1;
$CRITICAL=	2;
$UNKNOWN=	3;




sub get_options {
   #
   # this gets the command line parameters provided by the users
   #
   print "Running get_options subroutine \n" if ($verbose eq "yes");
   Getopt::Long::Configure('bundling');
   GetOptions(
      "h"   => \$opt_h, "help"        => \$opt_h,
      "v"   => \$opt_v, "verbose"      => \$opt_v,
   );
   #
   # If the user supplied the -h or --help switch, give them some help.
   #
   if( defined( $opt_h ) ) {
      print "Use this syntax \n";
      print "   $0 \n";
      print "   $0 --verbose     (increase output for debugging \n";
      exit $CRITICAL;				#exit script
   }
   #
   # If the user supplied the --verbose switch, increase output verbosity
   #
   if( defined( $opt_v ) ) {
      $verbose = "yes";
   } else {
      $verbose = "no";
   }
}                       #end of subroutine





sub sanity_checks {
   #
   print "Running sanity_checks subroutine \n" if ($verbose eq "yes");
   #
   # confirm uname binary exists and is executable
   # figure out where the uname command is on this system (varies across UNIX flavors)
   $uname = "/bin/uname"      if ( -e "/bin/uname");	
   $uname = "/sbin/uname"     if ( -e "/sbin/uname");	
   $uname = "/usr/bin/uname"  if ( -e "/usr/bin/uname");	
   $uname = "/usr/sbin/uname" if ( -e "/usr/sbin/uname");	
   if ( ! -e $uname ) {
      print "ERROR: Cannot find $uname binary \n";
      exit $CRITICAL;
   }
   if ( ! -x $uname ) {
      print "ERROR: $uname is not executable by the current user \n";
      exit $CRITICAL;
   }
   print "   found uname binary at $uname \n" if ($verbose eq "yes");
}						#end of subroutine




sub check_for_output_file {
   #
   # a cron job may have already created the output file that we need
   #
   print "running check_for_output_file subroutine \n" if ($verbose eq "yes");
   #
   $output_filename = "/tmp/nagios.check_unix_password_age.tmp";
   #
   # delete the output file if it is more than 12 hours (43200 seconds) old
   if ( -e $output_filename ) {                                 #see if a cron job has already provided the info we need
      ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,$blksize,$blocks) = stat($output_filename); #get last modification time in seconds since the epoch
      $output_file_age = time - $mtime;                                 #figure out how many seconds old the file is
      print "   output file $output_filename is $output_file_age seconds old \n" if ($verbose eq "yes");
      if( $output_file_age >= 43200 ) {                                   #see if the file is more than 43200 seconds old
         print "   deleting old copy of $output_filename \n" if ($verbose eq "yes");
         unlink "$output_filename";                                     #delete the file if it is too old
      }
   }                                                                    #end of if block
   #
   if ( -e "$output_filename" ) {                               #see if a cron job has already provided the info we need
      open (OUT,"$output_filename") or die "Cannot open $output_filename for reading $! \n";
      while (<OUT>) {                                                   #read a line from the text file
         $output_message = $_  if ( $_ =~ /[a-zA-Z]/);                  #get the content of the output file into a variable
         print "   output message is $output_message \n" if ($verbose eq "yes");
      }                                                                 #end of while loop
      close OUT;                                                        #close filehandle
      print $output_message;                                            #print the content of the output file
      exit $CRITICAL if ( $output_message =~ /CRITICAL/ );              #exit script with appropriate return code
      exit $WARN     if ( $output_message =~ /WARN/ );                  #exit script with appropriate return code
      exit $UNKNOWN  if ( $output_message =~ /UNKNOWN/ );               #exit script with appropriate return code
      exit $OK       if ( $output_message =~ /OK/ );                    #exit script with appropriate return code
   }                                                                    #end of if block
}                                                                       #end of subroutine




sub print_to_outputfile {
   #
   print "running print_to_outputfile \n" if ($verbose eq "yes");
   #
   # This subroutine is called whenever an output message is printed, to confirm that the $output_file exists
   #
   # confirm the output message exists
   $output_message = "$CHECK_NAME UNKNOWN - could not parse response from remote host \n" unless ($output_message);
   #
   # confirm the $output_filename variable is defined
   unless ($output_filename) {
      print "$CHECK_NAME UNKNOWN - the \$output_filename variable is not defined.  This might be a script bug. \n";
      exit $UNKNOWN;                                                            #only get this far if OK/WARN/CRITICAL/UNKNOWN was not found in the output file
   }                                                                            #end of unless block
   #
   if ( ! -e "$output_filename" ) {                                                     #only run this section if $output_filename does not already exist
      print "   $output_filename not found - writing output message to $output_filename \n" if ($verbose eq "yes");
      open (OUT,">$output_filename") or die "Cannot open $output_filename for writing: $! \n";
      print OUT "$output_message";
      close OUT;                                                                #close filehandle
      chmod 0644, "$output_filename";                                           #set the file permission to -rw-r--r-- to ensure nagios user can read file
   }                                                                            #end of if block
}                                                                               #end of subroutine



sub determine_os {
   #
   print "Running determine_os subroutine \n" if ($verbose eq "yes");
   #
   $cmd = "$uname";
   print "   running command: $cmd \n" if ($verbose eq "yes");
   open(IN,"$cmd |");                                                   #open filehandle using command output
   while (<IN>) {                                                       #read a line from the command output
      if    (/AIX/)     { $os = "AIX"     }
      elsif (/HP-UX/)   { $os = "HP-UX"   }
      elsif (/Linux/)   { $os = "Linux"   }
      elsif (/SunOS/)   { $os = "SunOS"   }
      elsif (/FreeBSD/) { $os = "FreeBSD" }
      elsif (/NetBSD/)  { $os = "NetBSD"  }
      elsif (/OpenBSD/) { $os = "OpenBSD" }
      elsif (/Darwin/)  { $os = "Darwin"  }
      else {
         print "ERROR: Cannot determine operating system \n";
         exit $CRITICAL;
      } 								#end of if/elsif/else block
   } 									#end of while loop
   close IN;								#close filehandle
   print "   operating system is $os \n" if ($verbose eq "yes");
   $common_output_data = "$common_output_data OS=$os,";			#add OS to the info that will be included in the script output
}						#end of subroutine




sub AIX {
   #
   return unless ($os eq "AIX");
   print "Running AIX subroutine \n" if ($verbose eq "yes");
   #
   #
   # confirm required files exist
   #
   my $lsuser = "/usr/sbin/lsuser";
   my $pwdadm = "/usr/bin/pwdadm";
   my $shadow  = "/etc/security/passwd";		#On Linux, this would be the /etc/shadow file containing the password hashes and lastupdate field.
   if ( ! -e $lsuser ) {
      print "ERROR: Cannot find $lsuser binary \n";
      exit $CRITICAL;
   }
   if ( ! -x $lsuser ) {
      print "ERROR: $lsuser is not executable by the current user \n";
      exit $CRITICAL;
   }
   if ( ! -e $pwdadm ) {
      print "ERROR: Cannot find $pwdadm binary \n";
      exit $CRITICAL;
   }
   if ( ! -x $pwdadm ) {
      print "ERROR: $pwdadm is not executable by the current user \n";
      exit $CRITICAL;
   }
   if ( ! -r $shadow ) {
      print "ERROR: $shadow is not readable by the current user \n";
      exit $CRITICAL;
   }
   if ( ! -e $shadow ) {
      print "ERROR: Cannot find $shadow \n";
      exit $CRITICAL;
   }
   #   
   # Loop through for each userid
   #   
   foreach $current_user (@list_of_users) {					#loop through for all defined user accounts
      #
      # initialize variables to ensure values are calculated fresh for each user
      $password_lastupdate  = ""; undef $password_lastupdate;
      $password_age_days    = ""; undef $password_age_days;
      $password_maxage_days = ""; undef $password_maxage_days;
      #
      #   
      # Get the maximum password age
      #   
      $cmd = "$lsuser -a maxage $current_user";
      print "   running command: $cmd \n" if ($verbose eq "yes");
      open(IN,"$cmd 2>&1|");                                                   	#open filehandle from command output
      while (<IN>) {                                                       	#read a line from the command output
         if ( /maxage=([0-9]+)/ ) {    						#find maximum password age in weeks
            $password_maxage_days = $1 * 7;					#multiply by 7 to convert weeks to days		
            print "      maxage_days:$password_maxage_days \n" if ($verbose eq "yes");
         }									#end of if block
      }										#end of while loop
      close IN;									#close filehandle
      #
      # Figure out the last time the password was changed
      #
      $cmd = "$pwdadm -q $current_user";
      print "   running command: $cmd \n" if ($verbose eq "yes");
      open(IN,"$cmd 2>&1 |");                                                   #open filehandle from command output
      while (<IN>) {                                                       	#read a line from the command output
         if ( /lastupdate = ([0-9]+)/ ) {    					#find password last update in seconds since epoch
            $password_lastupdate = $1;						#
            $seconds_since_epoch = time;					#figure out the number of seconds since epoch
            $password_age_days = ($seconds_since_epoch-$password_lastupdate)/60/60/24; #calculate number of days since last password change
            $password_age_days = sprintf("%.0f",$password_age_days);   	#truncate to 0 decimal places.  Nearest whole day is close enough.
            print "   user:$current_user seconds_since_epoch:$seconds_since_epoch  password_lastupdate:$password_lastupdate \n" if ($verbose eq "yes");
         }									#end of if block
      }										#end of while loop
      close IN;									#close filehandle
      #
      # stick all the above details into a hash so we can keep track of multiple users
      if ( defined($password_age_days) ) {
         print "   adding user $current_user to hash \n" if ($verbose eq "yes");
         $users{$current_user}{name}  	    	     = $current_user;
         $users{$current_user}{password_maxage_days} = $password_maxage_days;
         $users{$current_user}{password_age_days}    = $password_age_days;
         #
         $common_output_data = "$common_output_data user:$current_user age:$password_age_days maxage:$password_maxage_days,";
         print "      $common_output_data \n" if ($verbose eq "yes");
      } 									#end of if block
   }										#end of foreach loop
}										#end of subroutine





sub Linux {
   #
   return unless ($os eq "Linux");
   print "Running Linux subroutine \n" if ($verbose eq "yes");
   #
   # On Linux systems, the /etc/shadow file contains the following fields:
   # username:EncryptedPassword:DaysFromEpochSinceLastPasswordChange:MinimumDaysBetweenPasswordChagne:MaxDaysBetweenPasswordChange:Warning::
   # For example:
   #chage -l root
   #Last password change                                    : Feb 15, 2020
   #Password expires                                        : never
   #Password inactive                                       : never
   #Account expires                                         : never
   #Minimum number of days between password change          : 0
   #Maximum number of days between password change          : 99999
   #Number of days of warning before password expires       : 7
   #
   #
   # confirm required files exist
   #
   $shadow = "/etc/shadow";
   if ( ! -e $shadow ) {
      print "ERROR: Cannot find $shadow file \n";
      exit $CRITICAL;
   }
   if ( ! -r $shadow ) {
      print "ERROR: $shadow is not readable by the current user \n";
      exit $CRITICAL;
   }
   #
   #
   # Figure out the last time the password was changed
   #
   foreach my $current_user (@list_of_users) {					#loop through for all defined user accounts
      open(IN,"$shadow");                                                  	#open filehandle for reading
      while (<IN>) {                                                       	#read a line from the command output
         if ( /^$current_user:.*:([0-9]+):([0-9]+):([0-9]+):([0-9]+)/ ) {  	#find line in /etc/shadow with password age details
            $password_lastupdate = $1;						#
            $seconds_since_epoch = time;					#figure out the number of seconds since epoch
            $days_since_epoch = $seconds_since_epoch/60/60/24;			#figure out the number of days    since epoch
            $password_age_days = ($days_since_epoch-$password_lastupdate); 	#calculate number of days since last password change
            $password_age_days = sprintf("%.0f",$password_age_days);   		#truncate to 0 decimal places.  Nearest whole day is close enough.
            $password_maxage_days = $3;
            #
            # stick all the above details into a hash so we can keep track of multiple users
            $users{$current_user}{name} = $current_user;
            $users{$current_user}{password_age_days} = $password_age_days;
            $users{$current_user}{password_maxage_days} = $password_maxage_days;
            #
            $common_output_data = "$common_output_data user:$current_user age:$password_age_days maxage:$password_maxage_days,";
            print "$common_output_data \n" if ($verbose eq "yes");
         }									#end of if block
      }										#end of while loop
      close IN;									#close filehandle
   } 										#end of for loop
}										#end of subroutine




sub HPUX {
   #
   return unless ($os eq "HP-UX");
   print "Running HPUX subroutine \n" if ($verbose eq "yes");
   #
   print "$CHECK_NAME UNKNOWN - support for the $os operating system has not been added to this script \n";
   exit $UNKNOWN;
}						#end of subroutine

sub SunOS {
   #
   return unless ($os eq "SunOS");
   print "Running SunOS subroutine \n" if ($verbose eq "yes");
   #
   print "$CHECK_NAME UNKNOWN - support for the $os operating system has not been added to this script \n";
   exit $UNKNOWN;
}						#end of subroutine

sub FreeBSD {
   #
   return unless ($os eq "FreeBSD");
   print "Running FreeBSD subroutine \n" if ($verbose eq "yes");
   #
   print "$CHECK_NAME UNKNOWN - support for the $os operating system has not been added to this script \n";
   exit $UNKNOWN;
}						#end of subroutine

sub OpenBSD {
   #
   return unless ($os eq "OpenBSD");
   print "Running OpenBSD subroutine \n" if ($verbose eq "yes");
   #
   print "$CHECK_NAME UNKNOWN - support for the $os operating system has not been added to this script \n";
   exit $UNKNOWN;
}						#end of subroutine

sub NetBSD {
   #
   return unless ($os eq "NetBSD");
   print "Running NetBSD subroutine \n" if ($verbose eq "yes");
   #
   print "$CHECK_NAME UNKNOWN - support for the $os operating system has not been added to this script \n";
   exit $UNKNOWN;
}						#end of subroutine

sub Darwin {
   #
   return unless ($os eq "Darwin");
   print "Running Darwin subroutine \n" if ($verbose eq "yes");
   #
   print "$CHECK_NAME UNKNOWN - support for the $os operating system has not been added to this script \n";
   exit $UNKNOWN;
}						#end of subroutine




sub print_output {
   #
   print "Running print_output subroutine \n" if ($verbose eq "yes");
   #
   #
   # Send alert if the password is expired (days since last change is greater than maximum allowed age)
   foreach $key (keys %users) {
      print "   user:$users{$key}{name} age:$users{$key}{password_age_days} maxage:$users{$key}{password_maxage_days} \n" if ($verbose eq "yes");
      next unless ($users{$key}{name});
      next unless ($users{$key}{password_age_days});
      next unless ($users{$key}{password_maxage_days});
      if ( $users{$key}{password_age_days} > $users{$key}{password_maxage_days} ) {
         $output_message = "$CHECK_NAME WARN - expired password for $users{$key}{name} user.  Age:$users{$key}{password_age_days} days, MaxAge:$users{$key}{password_maxage_days} days.  $common_output_data | $perf_data \n";
         print "$output_message";		#print output to screen
         print_to_outputfile;           	#call subroutine to confirm the output is in the $output_filename used for subsequent script runs
         exit $WARN;
      } 								#end of if block
   } 									#end of foreach block
   #
   # should only get here if everything is ok
   $output_message = "$CHECK_NAME OK - no expired passwords found.  $common_output_data | $perf_data \n";
   print "$output_message";		#print output to screen
   print_to_outputfile;           	#call subroutine to confirm the output is in the $output_filename used for subsequent script runs
   exit $OK;
}			#end of subroutine




# ---------------- main body of script -------------------------
get_options;
sanity_checks;
check_for_output_file;
determine_os;
AIX;
Linux;
HPUX;
SunOS;
FreeBSD;
OpenBSD;
NetBSD;
Darwin;
print_output;

